{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Which city to explore (Ex:chicago, new york city, washington):washington\n",
      "Which month (Ex:all, january, february, march, april, may, june):june\n",
      "Which day of week (Ex:all, monday, tuesday, wednesday, thursday, friday, saturday, sunday):monday\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "CITY_DATA = { 'chicago': 'chicago.csv',\n",
    "              'new york city': 'new_york_city.csv',\n",
    "              'washington': 'washington.csv' }\n",
    "cities=['chicago','new york city','washington']\n",
    "months=['january','february','march','april','may','june','july']\n",
    "days=['monday','tuesday','wednesday','thursday','friday','saterday','sunday']\n",
    "\n",
    "\n",
    "\n",
    "while True:\n",
    " try:\n",
    "    city = input(\"Which city to explore (Ex:chicago, new york city, washington):\").lower()\n",
    "    break\n",
    " except EOFError:\n",
    "    print('Invalid, Try again')\n",
    "\n",
    "while True:\n",
    " try:\n",
    "    month = input(\"Which month (Ex:all, january, february, march, april, may, june):\").lower()\n",
    "    break\n",
    " except EOFError:\n",
    "    print('Invalid, Try again')\n",
    "  \n",
    "while True:\n",
    " try:\n",
    "    day = input(\"Which day of week (Ex:all, monday, tuesday, wednesday, thursday, friday, saturday, sunday):\").lower()\n",
    "    break\n",
    "    print('Invalid Input')\n",
    " except EOFError:\n",
    "    print('Invalid, Try again')\n",
    "print('-'*40)\n",
    "\n",
    "  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "#load data\n",
    "df = pd.read_csv(CITY_DATA[city])\n",
    "\n",
    "#to check the data\n",
    "#df.head()\n",
    "\n",
    "#convert to date time\n",
    "df['Start Time'] = pd.to_datetime(df['Start Time'])\n",
    "#creat new colume for month\n",
    "df['month'] = df['Start Time'].dt.month\n",
    "#creat new colume for day of week\n",
    "df['day_of_week'] = df['Start Time'].dt.weekday_name\n",
    "#creat new colume for hour\n",
    "df['hour'] = df['Start Time'].dt.hour\n",
    "\n",
    "if month != 'all':\n",
    " month = months.index(month) + 1\n",
    " df = df[df['month'] == month]\n",
    "\n",
    "if day != 'all':\n",
    " df = df[df['day_of_week'] == day.title()]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Calculating The Most Frequent Times of Travel in washington.\n",
      "\n",
      "Most Popular month: june\n",
      "Most Popular day: Monday\n",
      "Most Popular hour: 7\n",
      "\n",
      "This took 0.01837015151977539 seconds.\n"
     ]
    }
   ],
   "source": [
    "start_time = time.time()\n",
    "print('\\nCalculating The Most Frequent Times of Travel in {}.\\n'.format(city))\n",
    "\n",
    "# TO DO: display the most common month\n",
    "most_month = months[df['month'].mode()[0]-1]\n",
    "print('Most Popular month:', most_month)\n",
    "\n",
    "# TO DO: display the most common day\n",
    "most_day=df['day_of_week'].mode()[0]\n",
    "print ('Most Popular day:', most_day)\n",
    "\n",
    "# TO DO: display the most common start hour\n",
    "most_hour=df['hour'].mode()[0]\n",
    "print ('Most Popular hour:', most_hour)\n",
    "\n",
    "print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Calculating The Most Popular Stations and Trip for washington city\n",
      "\n",
      "The most common start station is Jefferson Dr & 14th St SW.\n",
      "The most common end station is Columbus Circle / Union Station.\n",
      "the most frequent combination of start and end stations is :Jefferson Dr & 14th St SW-Jefferson Dr & 14th St SW\n",
      "\n",
      "This took 0.20517206192016602 seconds.\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "print('\\nCalculating The Most Popular Stations and Trip for {} city\\n'.format(city))\n",
    "start_time = time.time()\n",
    "\n",
    "    # TO DO: display most commonly used start station\n",
    "most_start_station= df['Start Station'].mode()[0]\n",
    "print('The most common start station is {}.'.format(most_start_station))\n",
    "#for check\n",
    "#df['Start Station'].describe()\n",
    "\n",
    " \n",
    "    # TO DO: display most commonly used end station\n",
    "most_end_station=df['End Station'].mode()[0]\n",
    "print('The most common end station is {}.'.format(most_end_station))\n",
    "#for check\n",
    "#df['End Station'].describe()\n",
    "\n",
    "\n",
    "    # TO DO: display most frequent combination of start station and end station trip\n",
    "#combine the start and end stations\n",
    "df[\"new_combination\"] = df[['Start Station', 'End Station']].agg('-'.join, axis=1)\n",
    "most_combination =df['new_combination'].mode()[0]\n",
    "print('the most frequent combination of start and end stations is :{}'.format(most_combination))\n",
    "print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "print('-'*40)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Calculating Trip Duration for washington city\n",
      "\n",
      "The total time of trips is 9049560.334 S\n",
      "The mean time of trips is 1128.2334289988753 S\n",
      "\n",
      "This took 0.0015730857849121094 seconds.\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "print('\\nCalculating Trip Duration for {} city\\n'.format(city))\n",
    "start_time = time.time()\n",
    "\n",
    "    # TO DO: display total travel time\n",
    "total_time=df['Trip Duration'].sum()\n",
    "print('The total time of trips is {} S'.format(total_time))\n",
    "\n",
    "    # TO DO: display mean travel time\n",
    "mean_time=df['Trip Duration'].mean()\n",
    "print('The mean time of trips is {} S'.format(mean_time))\n",
    "\n",
    "print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "print('-'*40)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Calculating User Stats in washington city\n",
      "\n",
      "The users are:\n",
      " Subscriber    6059\n",
      "Customer      1962\n",
      "Name: User Type, dtype: int64\n",
      "No avaliable data for washington about gender and birth days\n",
      "\n",
      "This took 0.0038809776306152344 seconds.\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "print('\\nCalculating User Stats in {} city\\n'.format(city))\n",
    "start_time = time.time()\n",
    "\n",
    "    # TO DO: Display counts of user types\n",
    "user_types = df['User Type'].value_counts()\n",
    "print('The users are:\\n',user_types)\n",
    "\n",
    "if city=='washington':\n",
    "    print ('No avaliable data for {} about gender and birth days'.format (city))\n",
    " \n",
    "elif city =='chicago' or 'new york city':\n",
    "    # TO DO: Display counts of gender\n",
    "    gender_count = df['Gender'].value_counts()\n",
    "    print('The users are:\\n',gender_count)\n",
    "    # TO DO: Display earliest, most recent, and most common year of birth\n",
    "    print('The most recent user birth year is {}'.format (df['Birth Year'].max()))\n",
    "    print('The earlist user birth year is {}'.format (df['Birth Year'].min()))\n",
    "    print('The most common user birth year is {}'.format (df['Birth Year'].mode()[0]))\n",
    "\n",
    "    \n",
    "\n",
    "print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "print('-'*40)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "do you want to check the raw data of washington? (y/n)n\n"
     ]
    }
   ],
   "source": [
    "#to display the raw data of the city \n",
    "\n",
    "row=0\n",
    "while True:\n",
    " try:\n",
    "    user_data = input(\"do you want to check the raw data of {}? (y/n)\".format (city)).lower()\n",
    "    if user_data =='y':\n",
    "        print (df.iloc[row: row + 6])\n",
    "        row+=6\n",
    "    elif user_data == 'n':\n",
    "        break\n",
    " except EOFError:\n",
    "    print('Invalid, Try again')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
